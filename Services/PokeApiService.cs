// Namespace del servicio principal donde se implementan las llamadas a la PokeAPI
namespace Pokemon.Services;

using System.Net.Http.Json;             // Extensiones para consumir JSON f√°cilmente con HttpClient
using Microsoft.Extensions.Caching.Memory; // Cach√© en memoria (para optimizar llamadas repetidas)
using Pokemon.Models;                   // Modelos de datos usados para mapear las respuestas

// ----------------------------------------------------
// INTERFAZ DEL SERVICIO
// ----------------------------------------------------
// Define el contrato (qu√© m√©todos ofrece el servicio) sin implementaci√≥n.
// Esto permite inyectar e intercambiar implementaciones f√°cilmente.
public interface IPokeApiService
{
    // Obtiene una lista paginada de Pok√©mon junto con el total disponible.
    Task<(IEnumerable<PokemonSummary> Items, int Total)> GetPokemonPageAsync(int page, int pageSize, string? nameFilter, string? speciesFilter);

    // Obtiene la lista completa de especies de Pok√©mon (para el filtro del combo).
    Task<IEnumerable<string>> GetAllSpeciesAsync();

    // Obtiene los detalles completos de un Pok√©mon por nombre.
    Task<PokemonDetails?> GetPokemonDetailsAsync(string name);
}

// ----------------------------------------------------
// IMPLEMENTACI√ìN DEL SERVICIO
// ----------------------------------------------------
public class PokeApiService : IPokeApiService
{
    private readonly HttpClient _http;      // Cliente HTTP configurado con la URL base de la API
    private readonly IMemoryCache _cache;   // Cach√© en memoria para guardar resultados temporales

    // Constructor que recibe dependencias v√≠a inyecci√≥n
    public PokeApiService(HttpClient http, IMemoryCache cache)
    {
        _http = http;
        _cache = cache;
    }

    // ----------------------------------------------------
    // M√âTODO: GetPokemonPageAsync
    // ----------------------------------------------------
    // Obtiene una lista paginada de Pok√©mon desde la API p√∫blica.
    // Permite filtrar por nombre y especie.
    public async Task<(IEnumerable<PokemonSummary> Items, int Total)> GetPokemonPageAsync(int page, int pageSize, string? nameFilter, string? speciesFilter)
    {
        // Calcula el desplazamiento (offset) para la paginaci√≥n
        int offset = (page - 1) * pageSize;

        // Llama a la API de Pok√©mon con l√≠mite y desplazamiento
        var list = await _http.GetFromJsonAsync<PokemonListResponse>($"pokemon?limit={pageSize}&offset={offset}");

        // Si la respuesta es nula, inicializa una lista vac√≠a para evitar errores
        var results = list?.results ?? new List<PokemonNameUrl>();

        // Lista que contendr√° los Pok√©mon ya procesados
        var summaries = new List<PokemonSummary>();

        // üîÅ Ciclo foreach: recorre cada resultado del listado b√°sico de Pok√©mon
        foreach (var p in results)
        {
            // Validaci√≥n: si hay un filtro de nombre, ignora los que no coincidan
            if (!string.IsNullOrEmpty(nameFilter) &&
                !p.name.Contains(nameFilter, StringComparison.OrdinalIgnoreCase))
                continue;

            try
            {
                // Obtiene los detalles individuales de cada Pok√©mon
                var detail = await GetPokemonDetailsAsync(p.name);
                if (detail == null) continue;

                // Validaci√≥n: si hay filtro de especie, ignora los que no coincidan
                if (!string.IsNullOrEmpty(speciesFilter) &&
                    (detail.SpeciesName == null ||
                     !detail.SpeciesName.Contains(speciesFilter, StringComparison.OrdinalIgnoreCase)))
                    continue;

                // Agrega el Pok√©mon a la lista resumen
                summaries.Add(new PokemonSummary
                {
                    Name = detail.Name,
                    SpeciesName = detail.SpeciesName,
                    ImageUrl = detail.ImageUrl
                });
            }
            catch
            {
                // Si una llamada individual falla (por red o JSON), se ignora ese Pok√©mon
                continue;
            }
        }

        // Llama de nuevo a la API solo para obtener el total de Pok√©mon disponibles
        var root = await _http.GetFromJsonAsync<PokemonListResponse>($"pokemon?limit=1&offset=0");
        int total = root?.count ?? summaries.Count;

        // Devuelve la lista paginada y el total
        return (summaries, total);
    }

    // ----------------------------------------------------
    // M√âTODO: GetAllSpeciesAsync
    // ----------------------------------------------------
    // Obtiene todas las especies de Pok√©mon (para llenar el dropdown del filtro)
    // y las guarda temporalmente en cach√© para no consultar repetidamente.
    public async Task<IEnumerable<string>> GetAllSpeciesAsync()
    {
        // Busca en cach√© la lista; si no existe, la crea mediante el delegado async
        return await _cache.GetOrCreateAsync("species_list", async entry =>
        {
            // Define cu√°nto tiempo estar√° disponible en cach√© (6 horas)
            entry.AbsoluteExpirationRelativeToNow = TimeSpan.FromHours(6);

            // Llama a la API que devuelve todas las especies
            var resp = await _http.GetFromJsonAsync<SpeciesListResponse>("pokemon-species?limit=10000");

            // Si hay resultados, extrae los nombres; si no, devuelve lista vac√≠a
            return resp?.results?.Select(s => s.name) ?? Enumerable.Empty<string>();

        }) ?? Enumerable.Empty<string>(); // Si la cach√© devuelve null, se asegura devolver algo
    }

    // ----------------------------------------------------
    // M√âTODO: GetPokemonDetailsAsync
    // ----------------------------------------------------
    // Obtiene la informaci√≥n detallada de un Pok√©mon (altura, peso, sprite, especie, etc.)
    // Tambi√©n utiliza cach√© para mejorar rendimiento.
    public async Task<PokemonDetails?> GetPokemonDetailsAsync(string name)
    {
        // Intenta recuperar desde la cach√© la informaci√≥n de este Pok√©mon
        return await _cache.GetOrCreateAsync($"pokemon_{name}", async entry =>
        {
            // Se mantiene en cach√© por 30 minutos
            entry.AbsoluteExpirationRelativeToNow = TimeSpan.FromMinutes(30);

            // Llama a la API: /pokemon/{name}
            var detail = await _http.GetFromJsonAsync<PokemonDetailResponse>($"pokemon/{name}");
            if (detail == null) return null;

            // Tambi√©n se necesita la especie, que requiere otra llamada
            string speciesName = "";
            try
            {
                var species = await _http.GetFromJsonAsync<PokemonSpeciesRes>($"pokemon-species/{detail.id}");
                speciesName = species?.name ?? "";
            }
            catch
            {
                // Si la llamada de especie falla, se deja vac√≠o el nombre
                speciesName = "";
            }

            // Retorna un objeto con los datos consolidados del Pok√©mon
            return new PokemonDetails
            {
                Name = detail.name,
                ImageUrl = detail.sprites?.front_default,
                Height = detail.height,
                Weight = detail.weight,
                SpeciesName = speciesName
            };
        });
    }

    // ----------------------------------------------------
    // CLASES PRIVADAS DE APOYO
    // ----------------------------------------------------
    // Estas clases internas modelan la estructura JSON que devuelve la PokeAPI.
    // Son necesarias para que HttpClient pueda deserializar correctamente la respuesta.

    private class PokemonListResponse
    {
        public int count { get; set; }                          // Total de Pok√©mon disponibles
        public string? next { get; set; }                       // URL a la siguiente p√°gina (si aplica)
        public string? previous { get; set; }                   // URL a la p√°gina anterior (si aplica)
        public List<PokemonNameUrl> results { get; set; } = new(); // Lista b√°sica de Pok√©mon (nombre + URL)
    }

    private class PokemonNameUrl
    {
        public string name { get; set; } = null!;               // Nombre del Pok√©mon
        public string url { get; set; } = null!;                // Enlace a los detalles
    }

    private class PokemonDetailResponse
    {
        public int id { get; set; }                             // ID del Pok√©mon
        public string name { get; set; } = null!;               // Nombre
        public int height { get; set; }                         // Altura
        public int weight { get; set; }                         // Peso
        public Sprites? sprites { get; set; }                   // Imagen principal
        public List<AbilityInfo> abilities { get; set; } = new(); // Habilidades
        public List<TypeInfo> types { get; set; } = new();        // Tipos
    }

    private class Sprites
    {
        public string? front_default { get; set; }              // URL de la imagen frontal
    }

    private class AbilityInfo
    {
        public Ability ability { get; set; } = new();           // Informaci√≥n de una habilidad
    }

    private class Ability
    {
        public string name { get; set; } = null!;               // Nombre de la habilidad
        public string url { get; set; } = null!;                // Enlace con m√°s informaci√≥n
    }

    private class TypeInfo
    {
        public TypeDetail type { get; set; } = new();           // Informaci√≥n del tipo del Pok√©mon
    }

    private class TypeDetail
    {
        public string name { get; set; } = null!;               // Nombre del tipo (agua, fuego, etc.)
        public string url { get; set; } = null!;                // URL al tipo
    }

    private class SpeciesListResponse
    {
        public List<PokemonNameUrl>? results { get; set; }      // Lista de especies
    }

    private class PokemonSpeciesRes
    {
        public string name { get; set; } = null!;               // Nombre de la especie (por ejemplo ‚Äúbulbasaur‚Äù)
    }
}
